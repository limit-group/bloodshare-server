// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // engineType    = "binary"
  // binaryTargets = ["windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  FACILITYUSER
  FACILITYADMIN
  SUPERADMIN
}

enum Req {
  SELF
  OTHERS
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  AB_NEGATIVE
  AB_POSITIVE
  O_POSITIVE
  O_NEGATIVE
}

model User {
  id          Int        @id @default(autoincrement())
  password    String
  phoneNumber String     @unique
  otp         String
  verified    Boolean    @default(false)
  role        Role       @default(USER)
  profile     Profile?
  requests    Request[]
  feeds       Feed[]
  donations   Donation[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Profile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  name        String    @db.VarChar(255)
  avatar      String
  dateOfBirth DateTime
  bloodType   BloodType @unique
  latitude    String
  longitude   String
  
  bloodPoints Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Donation {
  id           Int      @id @default(autoincrement())
  profile      User     @relation(fields: [profileId], references: [id])
  profileId      Int     
  donorNumber  String
  facility     String
  donationDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Feed {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  media       String?  @default("https://cdn.pixabay.com/photo/2015/04/20/21/42/blood-732298_960_720.jpg")
  information String   @db.VarChar(255)
  going       Int      @default(0)   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Request {
  id           Int       @id @default(autoincrement())
  User         User?     @relation(fields: [userId], references: [id])
  userId       Int
  requestType  Req       @default(OTHERS)
  date         DateTime  @default(now())
  bloodGroup   BloodType
  latitude     String
  longitude    String
  bloodUnits   Int       @default(0)
  patientName  String    @db.VarChar(255)
  relationship String    @db.VarChar(255)
  accept       Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
