// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // engineType    = "binary"
  // binaryTargets = ["windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  FACILITYUSER
  FACILITYADMIN
  SUPERADMIN
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  AB_NEGATIVE
  AB_POSITIVE
  O_POSITIVE
  O_NEGATIVE
}

model User {
  id            Int             @id @default(autoincrement())
  password      String
  phoneNumber   String          @unique
  verified      Boolean         @default(false)
  role          Role            @default(USER)
  profile       Profile?
  donations     Donation[]
  requests Request[]
  feeds  Feed[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Profile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  name        String   @db.VarChar(255)
  avatar      String
  dateOfBirth DateTime 
  bloodType   BloodType @unique
  latitude    String
  longitude   String
  bloodPoints   Int          @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Donation {
  id          Int      @id @default(autoincrement())
  donor       User     @relation(fields: [donorId], references: [id])
  donorId     Int      @unique
  donorNumber Int
  facility    String
  donationDate  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Feed {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  media       String
  latitude    String?
  longitude   String?
  information String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Request {
  id          Int       @id @default(autoincrement())
  User        User?     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime @default(now())
  bloodGroup   BloodType
  latitude    String
  longitude   String
  description String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
