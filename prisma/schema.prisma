// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // engineType    = "binary"
  // binaryTargets = ["windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  FACILITYUSER
  FACILITYADMIN
  SUPERADMIN
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  AB_NEGATIVE
  AB_POSITIVE
  O_POSITIVE
  O_NEGATIVE
}

model User {
  id                  Int                  @id @default(autoincrement())
  password            String
  phoneNumber               String              @unique
  verified            Boolean              @default(false)
  role                Role                 @default(USER)
  profile             Profile?
  donations           Donation[]
  emergencyFeed EmergencyFeed[]
  donationFeed   DonationFeed[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}


model Profile {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int       @unique
  name         String
  avatar       String
  dateOfBirth  String
  bloodType    BloodType  @unique
  latitude    String
  longitude   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Donation {
  id         Int      @id @default(autoincrement())
  donor      User     @relation(fields: [donorId], references: [id])
  donorId    Int      @unique
  donorNumber  String  
  facility    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DonationFeed {
  id          Int      @id @default(autoincrement())
  user    User @relation(fields: [userId], references: [id])
  userId  Int
  media    String
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmergencyFeed {
  id          Int       @id @default(autoincrement())
  User        User?     @relation(fields: [userId], references: [id])
  userId      Int
  bloodType   BloodType
  description String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
